{"version":3,"sources":["components/Header.js","context/CategoriasContext.js","context/RecetasContext.js","components/Formulario.js","context/ModalContext.js","components/Receta.js","components/ListaRecetas.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriasProvider","props","useState","categorias","setCategorias","useEffect","a","Axios","get","data","drinks","obtenerCategorias","Provider","value","children","RecetasContext","RecetasProvider","recetas","setRecetas","nombre","categoria","busquedaRecetas","setBusquedaRecetas","consultar","setConsultar","url","console","log","axios","then","response","catch","err","obtenerRecetas","Formulario","useContext","busqueda","setBusqueda","obtenerDatosReceta","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","map","key","strCategory","ModalContext","ModalProvider","idReceta","setIdReceta","setReceta","obtenerReceta","Receta","receta","strDrink","src","strDrinkThumb","alt","onClick","idDrink","ListaRecetas","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0183d030.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <header className=\"bg-alert\">\n            <h1>Busca Recetas de Bebidas</h1>\n        </header>\n    );\n}\n\nexport default Header;","import React, { useState, createContext, useEffect } from 'react';\nimport Axios from 'axios';\n\nexport const CategoriasContext = createContext();\n\nconst CategoriasProvider = (props) => {\n\n    const [categorias, setCategorias] = useState([]);\n\n    useEffect(() => {\n        const obtenerCategorias = async () => {\n            const url = \"https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list\";\n\n            const categorias = await Axios.get(url);\n            setCategorias(categorias.data.drinks)\n        }\n        obtenerCategorias();\n    }, [])\n\n    return (\n        <CategoriasContext.Provider\n            value={{\n                categorias\n            }}\n        >\n            {props.children}\n        </CategoriasContext.Provider>\n    )\n}\nexport default CategoriasProvider;\n","import React, { createContext, useState, useEffect } from 'react';\nimport axios from \"axios\";\nexport const RecetasContext = createContext();\n\n\nconst RecetasProvider = (props) => {\n\n    const [recetas, setRecetas] = useState([]);\n    const [busquedaRecetas, setBusquedaRecetas] = useState({\n        nombre: \"\",\n        categoria: \"\"\n    });\n\n    const [consultar, setConsultar] = useState(false);\n    const { nombre, categoria } = busquedaRecetas;\n\n    useEffect(() => {\n        if (consultar) {\n            const obtenerRecetas = async () => {\n                if (nombre && categoria) {\n                    const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${nombre}&c=${categoria}`;\n                    const resultado =\n                        console.log(url)\n                    await axios\n                        .get(url)\n                        .then(response => {\n                            setRecetas(response.data.drinks)\n                        })\n                        .catch(err => {\n                            console.log(err)\n                        })\n                } else {\n                    const url = \"https://www.thecocktaildb.com/api/json/v1/1/random.php\"\n                    const resultado =\n\n                        await axios\n                            .get(url)\n                            .then(response => {\n                                setRecetas(response.data.drinks)\n                            })\n                            .catch(err => {\n                                console.log(err)\n                            })\n                }\n            }\n            obtenerRecetas();\n        }\n    }, [busquedaRecetas]);\n\n    return (\n        <RecetasContext.Provider\n            value={{\n                recetas,\n                setBusquedaRecetas,\n                setConsultar\n            }}\n        >\n            {props.children}\n        </RecetasContext.Provider>\n    );\n}\n\nexport default RecetasProvider;","import React, { useContext, useState } from 'react';\nimport { CategoriasContext } from \"../context/CategoriasContext\";\nimport { RecetasContext } from \"../context/RecetasContext\";\n\nconst Formulario = () => {\n\n    const { categorias } = useContext(CategoriasContext);\n    const { setBusquedaRecetas, setConsultar } = useContext(RecetasContext);\n\n    const [busqueda, setBusqueda] = useState({\n        nombre: \"\",\n        categoria: \"\"\n    });\n\n    const obtenerDatosReceta = e => {\n        setBusqueda({\n            ...busqueda,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    return (\n        <form\n            className=\"col-12\"\n            onSubmit={e => {\n                e.preventDefault();\n                setBusquedaRecetas(busqueda);\n                setConsultar(true);\n            }}\n        >\n            <fieldset className=\"text-center\">\n                <legend>Busca bebidas por categoria o Ingrediente</legend>\n            </fieldset>\n\n            <div className=\"row mt-4\">\n                <div className=\"col-md-4\">\n                    <input\n                        name=\"nombre\"\n                        className=\"form-control\"\n                        type=\"text\"\n                        placeholder=\"Buscar por Ingrediente\"\n                        onChange={obtenerDatosReceta}\n                    />\n                </div>\n                <div className=\"col-md-4\">\n                    <select\n                        className=\"form-control\"\n                        name=\"categoria\"\n                        onChange={obtenerDatosReceta}\n                    >\n                        <option value=\"\" >-- Seleccion Categor√≠a --</option>\n                        {categorias.map(categoria => (\n                            <option\n                                key={categoria.strCategory}\n                                value={categoria.strCategory}\n                            >{categoria.strCategory}</option>\n                        ))}\n                    </select>\n                </div>\n                <div className=\"col-md-4\">\n                    <input\n                        type=\"submit\"\n                        className=\"shadow btn btn-block btn-danger rounded\"\n                        value=\"Buscar Bebidas\"\n                    />\n                </div>\n            </div>\n        </form>\n    );\n}\n\nexport default Formulario;","import React, { createContext, useEffect, useState } from 'react';\nimport Axios from 'axios';\n\nexport const ModalContext = createContext();\n\nconst ModalProvider = (props) => {\n\n    const [idReceta, setIdReceta] = useState(null);\n    const [receta, setReceta] = useState({});\n\n    useEffect(() => {\n        const obtenerReceta = async () => {\n            if (!idReceta) return;\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idReceta}`\n\n            const resultado =\n                await Axios\n                    .get(url)\n                    .then(response => (\n                        setReceta(response.data.drinks[0])\n                    ))\n                    .catch(\n                        setReceta(\"No se encontro la receta\")\n                    )\n        }\n        obtenerReceta();\n    }, [idReceta])\n\n    return (\n        <ModalContext.Provider\n            value={{\n                setIdReceta\n            }}\n        >\n            {props.children}\n        </ModalContext.Provider>\n    );\n}\n\nexport default ModalProvider;","import React, { useContext } from 'react';\nimport { ModalContext } from \"../context/ModalContext\";\n\nconst Receta = ({ receta }) => {\n\n    const { setIdReceta } = useContext(ModalContext);\n\n    return (\n        <div className=\"col-md-4 mb-3\">\n            <div className=\"card  justify-content-center h-100\">\n                <h2 className=\"card-header\">\n                    {receta.strDrink}\n                </h2>\n                <img\n                    className=\"card-img-top\"\n                    src={receta.strDrinkThumb}\n                    alt={`imagen de ${receta.strDrink}`}\n                />\n                <div className=\"card-body\">\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-block btn-primary\"\n                        onClick={() => {\n                            setIdReceta(receta.idDrink)\n                        }}\n                    >\n                        Ver Receta\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Receta;","import React, { useContext } from 'react';\nimport { RecetasContext } from \"../context/RecetasContext\";\nimport Receta from \"./Receta\";\n\n\nconst ListaRecetas = () => {\n\n    const { recetas } = useContext(RecetasContext);\n\n    return (\n        <div className=\"row mt-5\">\n            {recetas.map(receta => (\n                <Receta\n                    key={receta.idDrink}\n                    receta={receta}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default ListaRecetas;","import React from 'react';\nimport Header from \"./components/Header\";\nimport Formulario from \"./components/Formulario\";\nimport ListaRecetas from \"./components/ListaRecetas\";\nimport CategoriasProvider from \"./context/CategoriasContext\";\nimport RecetasProvider from \"./context/RecetasContext\";\nimport ModalProvider from \"./context/ModalContext\";\n\nfunction App() {\n  return (\n    <CategoriasProvider>\n      <RecetasProvider>\n        <ModalProvider>\n          <Header />\n\n          <div className=\"container mt-5\">\n            <div className=\"row\">\n              <Formulario />\n            </div>\n            <ListaRecetas />\n          </div>\n        </ModalProvider>\n      </RecetasProvider>\n    </CategoriasProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}